name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Path to the .tfvars file'
        required: true
        default: 'terraform.tfvars'
      action:
        type: choice
        description: 'Apply, Plan, or Destroy'
        options:
        - plan
        - apply
        - destroy
        required: true
        default: 'plan'

env:
  AWS_DEFAULT_REGION: us-east-1

jobs:
  CheckOut-Repo:
    runs-on: ubuntu-latest
    environment: devops-eks

    steps:
    - name: Checkout
      uses: actions/checkout@v4

  Setting-Up-Terraform:
    runs-on: ubuntu-latest
    needs: CheckOut-Repo

    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.8.4

  Check-S3-Bucket:
    runs-on: ubuntu-latest
    needs: Setting-Up-Terraform

    steps:
    - name: Set AWS credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

    - name: Check if S3 bucket exists and create if not
      id: check_s3_bucket
      run: |
        if ! aws s3api head-bucket --bucket "tamtamcoding-tfstate" --region $AWS_DEFAULT_REGION 2>/dev/null; then
          echo "S3 bucket does not exist. Creating bucket..."
          aws s3api create-bucket --bucket "tamtamcoding-tfstate" --region $AWS_DEFAULT_REGION
          echo "Bucket created. Waiting for 60 seconds to ensure consistency..."
          sleep 60
        else
          echo "S3 bucket exists."
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  Terraform-Initializing:
    runs-on: ubuntu-latest
    needs: Check-S3-Bucket

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.8.4

    - name: Terraform Init
      working-directory: eks
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  Terraform-Formatting-Validating:
    runs-on: ubuntu-latest
    needs: Terraform-Initializing

    steps:
    - name: Terraform Format
      working-directory: eks
      run: terraform fmt -check
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Terraform Validate
      working-directory: eks
      run: terraform validate
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  Terraform-Action:
    runs-on: ubuntu-latest
    needs: Terraform-Formatting-Validating

    steps:
    - name: Set AWS credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

    - name: Terraform Action
      working-directory: eks
      run: |
        terraform ${{ github.event.inputs.action }} -var-file=${{ github.event.inputs.tfvars_file }} -input=false -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
