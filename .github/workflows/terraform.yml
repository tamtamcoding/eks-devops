name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Path to the .tfvars file'
        required: true
        default: 'terraform.tfvars'
      action:
        type: choice
        description: 'Apply or Destroy'
        options:
        - plan
        - apply
        - destroy
        required: true
        default: 'plan'

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: devops-eks

    defaults:
      run:
        shell: bash
        working-directory: eks

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Set AWS credentials
      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      # Check if S3 bucket exists and create if not
      - name: Check if S3 bucket exists and create if not
        id: check_s3_bucket
        run: |
          if ! aws s3api head-bucket --bucket "tamtamcoding-tfstate" 2>/dev/null; then
            echo "S3 bucket does not exist. Creating bucket..."
            aws s3api create-bucket --bucket "tamtamcoding-tfstate" --region us-east-1
            echo "Bucket created. Waiting for 60 seconds to ensure consistency..."
            sleep 60
          else
            echo "S3 bucket exists."
          fi

      # Install Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.4

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Format Terraform files
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Plan or Apply based on input
      - name: Terraform Plan/Apply/Destroy
        run: |
          terraform ${GITHUB_EVENT.inputs.action} -var-file=${GITHUB_EVENT.inputs.tfvars_file} -input=false -auto-approve
        if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}
